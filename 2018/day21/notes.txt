ip=0  [0, 0, 0, 0, 0, 0]                    seti 123 0 1        [0, 123, 0, 0, 0, 0]                 reg[1] = 123
ip=1  [0, 123, 0, 0, 1, 0]                  bani 1 456 1        [0, 72, 0, 0, 1, 0]                  reg[1] = reg[1] & 456
ip=2  [0, 72, 0, 0, 2, 0]                   eqri 1 72 1         [0, 1, 0, 0, 2, 0]                   reg[1] = (reg[1] == 72 ? 1 : 0) -> true
ip=3  [0, 1, 0, 0, 3, 0]                    addr 1 4 4          [0, 1, 0, 0, 4, 0]                   reg[4] = reg[1] + reg[4] -> add an extra value to the ip if the & was correct
ip=5  [0, 1, 0, 0, 5, 0]                    seti 0 7 1          [0, 0, 0, 0, 5, 0]                   reg[1] = 0 -> only skipped if (123 & 456) returns an unexpected value

ip=6  [0, 0, 0, 0, 6, 0]                    bori 1 65536 2      [0, 0, 65536, 0, 6, 0]               reg[2] = reg[1] | 65536 (0b10000000000000000) -> becomes 65537 (0b10000000000000001) if & returned unexpected value
ip=7  [0, 0, 65536, 0, 7, 0]                seti 8725355 6 1    [0, 8725355, 65536, 0, 7, 0]         reg[1] = 8725355 (0b100001010010001101101011)
ip=8  [0, 8725355, 65536, 0, 8, 0]          bani 2 255 5        [0, 8725355, 65536, 0, 8, 0]         reg[5] = reg[2] & 255 (0b11111111) -> becomes 1 if & returned unexpected value
ip=9  [0, 8725355, 65536, 0, 9, 0]          addr 1 5 1          [0, 8725355, 65536, 0, 9, 0]         reg[1] += reg[5] -> reg[1] becomes 8725355 (0b100001010010001101101011) if & returns unexpected value
ip=10 [0, 8725355, 65536, 0, 10, 0]         bani 1 16777215 1   [0, 8725355, 65536, 0, 10, 0]        reg[1] = reg[1] & (0b111111111111111111111111) -> no change up to 24 bits
ip=11 [0, 8725355, 65536, 0, 11, 0]         muli 1 65899 1      [0, 574992169145, 65536, 0, 11, 0]   reg[1] *= 65899 -> reg[1] becomes 574992169145 if & returns unexpected value
ip=12 [0, 574992169145, 65536, 0, 12, 0]    bani 1 16777215 1   [0, 3422393, 65536, 0, 12, 0]        reg[1] = reg[1] & (0b111111111111111111111111) -> reg[1] becomes 3422393 if & returns unexpected value
ip=13 [0, 3422393, 65536, 0, 13, 0]         gtir 256 2 5        [0, 3422393, 65536, 0, 13, 0]        reg[5] = (256 > reg[2] ? 1 : 0) -> recall reg[2] would be 65537 if & returned unexpected value
ip=14 [0, 3422393, 65536, 0, 14, 0]         addr 5 4 4          [0, 3422393, 65536, 0, 14, 0]        reg[4] += reg[5] -> no change, unless reg[2] manages to be smaller than 256 (we don't know it can get there yet)
ip=15 [0, 3422393, 65536, 0, 15, 0]         addi 4 1 4          [0, 3422393, 65536, 0, 16, 0]        reg[4] += 1 -> skip instruction 16 unless the previous line can make 1 get added (in which case this line gets skipped)
                                                                                                                    (instruction 16: 'seti 27 8 4', which causes instruction 28 to run; see below)
ip=17 [0, 3422393, 65536, 0, 17, 0]         seti 0 0 5          [0, 3422393, 65536, 0, 17, 0]        reg[5] = 0 -> reset to 0 (may be relevant if it was set to something else above)

-----------

CHUNK 1

ip=18 [0, 3422393, 65536, 0, 18, 0]         addi 5 1 3          [0, 3422393, 65536, 1, 18, 0]        reg[3] = reg[5] + 1
ip=19 [0, 3422393, 65536, 1, 19, 0]         muli 3 256 3        [0, 3422393, 65536, 256, 19, 0]      reg[3] *= 256
ip=20 [0, 3422393, 65536, 256, 20, 0]       gtrr 3 2 3          [0, 3422393, 65536, 0, 20, 0]        reg[3] = (reg[3] > reg[2] ? 1 : 0) -> true when reg[3] becomes 65536 if & works, or 65537 if & does not work
ip=21 [0, 3422393, 65536, 0, 21, 0]         addr 3 4 4          [0, 3422393, 65536, 0, 21, 0]        reg[4] += reg[3] -> skip instruction 22 when reg[3] gets big enough per above
ip=22 [0, 3422393, 65536, 0, 22, 0]         addi 4 1 4          [0, 3422393, 65536, 0, 23, 0]        reg[4] += 1 -> causes instruction 23 to be skipped, which will stop happening when reg[3] gets big enough per above
                                                                                                                    (instruction 23: 'seti 25 1 4', which jumps us to skip instruction 24)
ip=24 [0, 3422393, 65536, 0, 24, 0]         addi 5 1 5          [0, 3422393, 65536, 0, 24, 1]        reg[5] += 1 -> skipped when reg[3] gets big enough
ip=25 [0, 3422393, 65536, 0, 25, 1]         seti 17 9 4         [0, 3422393, 65536, 0, 17, 1]        reg[4] = 17 -> jumps up back to instruction 18, where reg[5] will increment

CHUNK 2

ip=18 [0, 3422393, 65536, 0, 18, 1]         addi 5 1 3          [0, 3422393, 65536, 2, 18, 1]        <- Process repeats, with reg[5] incrementing, and
ip=19 [0, 3422393, 65536, 2, 19, 1]         muli 3 256 3        [0, 3422393, 65536, 512, 19, 1]         reg[3] increasing by 256 each time...
ip=20 [0, 3422393, 65536, 512, 20, 1]       gtrr 3 2 3          [0, 3422393, 65536, 0, 20, 1]           
ip=21 [0, 3422393, 65536, 0, 21, 1]         addr 3 4 4          [0, 3422393, 65536, 0, 21, 1]           
ip=22 [0, 3422393, 65536, 0, 22, 1]         addi 4 1 4          [0, 3422393, 65536, 0, 23, 1]
ip=24 [0, 3422393, 65536, 0, 24, 1]         addi 5 1 5          [0, 3422393, 65536, 0, 24, 2]
ip=25 [0, 3422393, 65536, 0, 25, 2]         seti 17 9 4         [0, 3422393, 65536, 0, 17, 2]

...eventually, reg[3] will become 65536 after 256 iterations of these chunks.

------------

After 1808 instructions, we get:

ip=18 [0, 3422393, 65536, 0, 18, 256]       addi 5 1 3        [0, 3422393, 65536, 257, 18, 256]       
ip=19 [0, 3422393, 65536, 257, 19, 256]     muli 3 256 3      [0, 3422393, 65536, 65792, 19, 256]
ip=20 [0, 3422393, 65536, 65792, 20, 256]   gtrr 3 2 3        [0, 3422393, 65536, 1, 20, 256]         reg[3] = (reg[3] > reg[2] ? 1 : 0) -> now true!
ip=21 [0, 3422393, 65536, 1, 21, 256]       addr 3 4 4        [0, 3422393, 65536, 1, 22, 256]         reg[4] += reg[3] -> reg[3] now contains 1
ip=23 [0, 3422393, 65536, 1, 23, 256]       seti 25 1 4       [0, 3422393, 65536, 1, 25, 256]         reg[4] = 25 -> skip the jump back to 17 this time
ip=26 [0, 3422393, 65536, 1, 26, 256]       setr 5 1 2        [0, 3422393, 256, 1, 26, 256]           reg[2] = reg[5] -> reg[5] contained the number of iterations it took to get out of the loop, which was 256
ip=27 [0, 3422393, 256, 1, 27, 256]         seti 7 6 4        [0, 3422393, 256, 1, 7, 256]            reg[4] = 7 -> jump back to instruction 8

ip=8 [0, 3422393, 256, 1, 8, 256]           bani 2 255 5      [0, 3422393, 256, 1, 8, 0]              reg[5] = reg[2] & 255 -> cuts off any bits beyond the lowest 8 (in this case making it zero)
ip=9 [0, 3422393, 256, 1, 9, 0]             addr 1 5 1        [0, 3422393, 256, 1, 9, 0]              reg[1] += reg[5] -> no change unless reg[5] has any bits in the lowest 8
ip=10 [0, 3422393, 256, 1, 10, 0]           bani 1 16777215 1 [0, 3422393, 256, 1, 10, 0]             reg[1] = reg[1] & (0b111111111111111111111111) -> no change unless reg[1] is more than 24 bits
ip=11 [0, 3422393, 256, 1, 11, 0]           muli 1 65899 1    [0, 225532276307, 256, 1, 11, 0]        reg[1] *= 65899
ip=12 [0, 225532276307, 256, 1, 12, 0]      bani 1 16777215 1 [0, 12938835, 256, 1, 12, 0]            reg[1] = reg[1] & (0b111111111111111111111111) -> cut off bits above 24
ip=13 [0, 12938835, 256, 1, 13, 0]          gtir 256 2 5      [0, 12938835, 256, 1, 13, 0]            reg[5] = (256 > reg[2]) ? 1 : 0 -> will become true when less than 256 chunk iterations are needed
ip=14 [0, 12938835, 256, 1, 14, 0]          addr 5 4 4        [0, 12938835, 256, 1, 14, 0]            reg[4] += reg[5] -> skip instruction 15 when reg[2] is small enough
ip=15 [0, 12938835, 256, 1, 15, 0]          addi 4 1 4        [0, 12938835, 256, 1, 16, 0]            reg[4] += 1 -> skip instruction 16, which would have skipped us to instruction 28
ip=17 [0, 12938835, 256, 1, 17, 0]          seti 0 0 5        [0, 12938835, 256, 1, 17, 0]            reg[5] = 0 -> resets reg[5] to zero so the chunks iterations can start again


This time, we only need 1 chunk iteration to get out of the loop:

ip=18 [0, 12938835, 256, 1, 18, 0]          addi 5 1 3        [0, 12938835, 256, 1, 18, 0]
ip=19 [0, 12938835, 256, 1, 19, 0]          muli 3 256 3      [0, 12938835, 256, 256, 19, 0]
ip=20 [0, 12938835, 256, 256, 20, 0]        gtrr 3 2 3        [0, 12938835, 256, 0, 20, 0]
ip=21 [0, 12938835, 256, 0, 21, 0]          addr 3 4 4        [0, 12938835, 256, 0, 21, 0]
ip=22 [0, 12938835, 256, 0, 22, 0]          addi 4 1 4        [0, 12938835, 256, 0, 23, 0]
ip=24 [0, 12938835, 256, 0, 24, 0]          addi 5 1 5        [0, 12938835, 256, 0, 24, 1]
ip=25 [0, 12938835, 256, 0, 25, 1]          seti 17 9 4       [0, 12938835, 256, 0, 17, 1]


Then from the section starting at 18 we get 1 as a new value that has to :

ip=18 [0, 12938835, 256, 0, 18, 1]          addi 5 1 3        [0, 12938835, 256, 2, 18, 1]
ip=19 [0, 12938835, 256, 2, 19, 1]          muli 3 256 3      [0, 12938835, 256, 512, 19, 1]
ip=20 [0, 12938835, 256, 512, 20, 1]        gtrr 3 2 3        [0, 12938835, 256, 1, 20, 1]
ip=21 [0, 12938835, 256, 1, 21, 1]          addr 3 4 4        [0, 12938835, 256, 1, 22, 1]
ip=23 [0, 12938835, 256, 1, 23, 1]          seti 25 1 4       [0, 12938835, 256, 1, 25, 1]
ip=26 [0, 12938835, 256, 1, 26, 1]          setr 5 1 2        [0, 12938835, 1, 1, 26, 1]
ip=27 [0, 12938835, 1, 1, 27, 1]            seti 7 6 4        [0, 12938835, 1, 1, 7, 1]


And now we get to jump to instruction 28, woohoo!

ip=8 [0, 12938835, 1, 1, 8, 1]              bani 2 255 5      [0, 12938835, 1, 1, 8, 1]               reg[5] = reg[2] & 255
ip=9 [0, 12938835, 1, 1, 9, 1]              addr 1 5 1        [0, 12938836, 1, 1, 9, 1]               reg[1] += reg[5]
ip=10 [0, 12938836, 1, 1, 10, 1]            bani 1 16777215 1 [0, 12938836, 1, 1, 10, 1]              reg[1] = reg[1] & (0b111111111111111111111111)
ip=11 [0, 12938836, 1, 1, 11, 1]            muli 1 65899 1    [0, 852656353564, 1, 1, 11, 1]          reg[1] *= 65899
ip=12 [0, 852656353564, 1, 1, 12, 1]        bani 1 16777215 1 [0, 4682012, 1, 1, 12, 1]               reg[1] = reg[1] & (0b111111111111111111111111)
ip=13 [0, 4682012, 1, 1, 13, 1]             gtir 256 2 5      [0, 4682012, 1, 1, 13, 1]               reg[5] = (256 > reg[2] ? 1 : 0)
ip=14 [0, 4682012, 1, 1, 14, 1]             addr 5 4 4        [0, 4682012, 1, 1, 15, 1]               reg[4] += reg[5]
ip=16 [0, 4682012, 1, 1, 16, 1]             seti 27 8 4       [0, 4682012, 1, 1, 27, 1]               reg[4] = 27

ip=28 [0, 4682012, 1, 1, 28, 1]             eqrr 1 0 5        [0, 4682012, 1, 1, 28, 0]               reg[5] = (reg[1] == reg[0]) ? 1 : 0
ip=29 [0, 4682012, 1, 1, 29, 0]             addr 5 4 4        [0, 4682012, 1, 1, 29, 0]               reg[4] += reg[5] -> would stop program if reg[1] equalled reg[0]



If reg[1] does not equal reg[0]:

ip=30 [0, 4682012, 1, 1, 30, 0]             seti 5 7 4        [0, 4682012, 1, 1, 5, 0]                reg[4] = 5 (jump up to instruction 6)
ip=6  [0, 4682012, 1, 1, 6, 0]              bori 1 65536 2    [0, 4682012, 4682012, 1, 6, 0]          reg[2] = reg[1] | (0b10000000000000000) (reg[1] left off at something that was max 24 bits)
 
ip=7  [0, 4682012, 4682012, 1, 7, 0]        seti 8725355 6 1  [0, 8725355, 4682012, 1, 7, 0]          reg[1] = 8725355
ip=8  [0, 8725355, 4682012, 1, 8, 0]        bani 2 255 5      [0, 8725355, 4682012, 1, 8, 28]         reg[5] = reg[2] & (0b11111111) (cut off above 8 bits)
ip=9  [0, 8725355, 4682012, 1, 9, 28]       addr 1 5 1        [0, 8725383, 4682012, 1, 9, 28]         reg[1] += reg[5]
ip=10 [0, 8725383, 4682012, 1, 10, 28]      bani 1 16777215 1 [0, 8725383, 4682012, 1, 10, 28]        reg[1] = reg[1] & (0b111111111111111111111111) (cut off above 24 bits)
ip=11 [0, 8725383, 4682012, 1, 11, 28]      muli 1 65899 1    [0, 574994014317, 4682012, 1, 11, 28]   reg[1] *= 65899
ip=12 [0, 574994014317, 4682012, 1, 12, 28] bani 1 16777215 1 [0, 5267565, 4682012, 1, 12, 28]        reg[1] = reg[1] & (0b111111111111111111111111)
ip=13 [0, 5267565, 4682012, 1, 13, 28]      gtir 256 2 5      [0, 5267565, 4682012, 1, 13, 0]         reg[5] = (256 > reg[2] ? 1 : 0)
ip=14 [0, 5267565, 4682012, 1, 14, 0]       addr 5 4 4        [0, 5267565, 4682012, 1, 14, 0]         reg[4] += reg[5]
ip=15 [0, 5267565, 4682012, 1, 15, 0]       addi 4 1 4        [0, 5267565, 4682012, 1, 16, 0]         reg[4] += 1
ip=17 [0, 5267565, 4682012, 1, 17, 0]       seti 0 0 5        [0, 5267565, 4682012, 1, 17, 0]         reg[5] = 0

ip=18 [0, 5267565, 4682012, 1, 18, 0]       addi 5 1 3        [0, 5267565, 4682012, 1, 18, 0]
ip=19 [0, 5267565, 4682012, 1, 19, 0]       muli 3 256 3      [0, 5267565, 4682012, 256, 19, 0]
ip=20 [0, 5267565, 4682012, 256, 20, 0]     gtrr 3 2 3        [0, 5267565, 4682012, 0, 20, 0]
ip=21 [0, 5267565, 4682012, 0, 21, 0]       addr 3 4 4        [0, 5267565, 4682012, 0, 21, 0]
ip=22 [0, 5267565, 4682012, 0, 22, 0]       addi 4 1 4        [0, 5267565, 4682012, 0, 23, 0]
ip=24 [0, 5267565, 4682012, 0, 24, 0]       addi 5 1 5        [0, 5267565, 4682012, 0, 24, 1]
ip=25 [0, 5267565, 4682012, 0, 25, 1]       seti 17 9 4       [0, 5267565, 4682012, 0, 17, 1]








